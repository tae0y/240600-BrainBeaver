{
	"lastBuildDate":"Fri, 05 Jul 2024 12:48:00 +0900",
	"total":3209,
	"start":1,
	"display":3,
	"items":[
		{
			"title":"[Effective Java : Item 32] <b>제네릭<\/b>과 <b>가변인수<\/b>를 함께 쓸 때는 신중하라",
			"link":"https:\/\/my-coding-notes.tistory.com\/714",
			"description":"개요 <b>가변인수<\/b>(varargs)란 다음과 같이 명시한 <b>타입<\/b>의 <b>인수<\/b>를 0개 이상 받을 수 있는 것을 의미한다. static int sum(int... args) { int sum = 0; for (int arg : args) sum += arg; return sum; } 메서드가 호출되면 <b>인수<\/b>의 개수와 길이가 같은 <b>배열<\/b>을 생성한 뒤 <b>인수<\/b>들을 이 <b>배열<\/b>에 저..."
		},
		{
			"title":"[아이템 32] <b>제네릭<\/b>과 <b>가변인수<\/b>를 함께 쓸 때는 신중하라",
			"link":"https:\/\/jaimemin.tistory.com\/2390",
			"description":"<b>제네릭<\/b> <b>가변인수<\/b> 앞서 아이템 28에서 다루었다시피 <b>제네릭<\/b>의 불공변 특성으로 인해 <b>배열<\/b>과 어울리지 않습니다. 이로 인해 자바 컴파일러는 <b>제네릭<\/b> <b>배열<\/b>을 직접 정의하는 것을 막지만, <b>제네릭<\/b>과 <b>가변<\/b>인자를 함께 사용할 경우 <b>제네릭<\/b> <b>배열<\/b>을 만들 수 있으며 이때 비검사 경고만 발생하고 컴파일은 정상적으로 진행됩니다. <b>제네릭<\/b>을 사용하는 이유는 컴파일 타임에 <b>타입<\/b> 안..."
		},
		{
			"title":"아이템 32. <b>제네릭<\/b>과 <b>가변인수<\/b>를 함께 쓸 때는 신중하라",
			"link":"https:\/\/velog.io\/@banjjoknim\/%EC%95%84%EC%9D%B4%ED%85%9C-32.-%EC%A0%9C%EB%84%A4%EB%A6%AD%EA%B3%BC-%EA%B0%80%EB%B3%80%EC%9D%B8%EC%88%98%EB%A5%BC-%ED%95%A8%EA%BB%98-%EC%93%B8-%EB%95%8C%EB%8A%94-%EC%8B%A0%EC%A4%91%ED%95%98%EB%9D%BC",
			"description":"이를 사용하면 결과 코드는 <b>배열<\/b> 없이 <b>제네릭<\/b>만 사용하게 되므로 <b>타입 안전<\/b>해진다. 핵심 정리 <b>가변인수<\/b>와 <b>제네릭<\/b>은 궁합이 좋지 않다. <b>가변인수<\/b> 기능은 <b>배열<\/b>을 노출하여 추상화가 완벽하지... <b>제네릭<\/b>과 <b>가변인수<\/b>를..."
		}
	]
}